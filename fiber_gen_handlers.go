// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
)

// Error defines model for Error.
type Error struct {
	Message *string `json:"message,omitempty"`
}

// Item defines model for Item.
type Item struct {
	CreateTime *time.Time `json:"create_time,omitempty"`
	Id         *string    `json:"id,omitempty"`
	Name       *string    `json:"name,omitempty"`
}

// NewItem defines model for NewItem.
type NewItem struct {
	Name string `json:"name"`
}

// PostItemsJSONRequestBody defines body for PostItems for application/json ContentType.
type PostItemsJSONRequestBody = NewItem

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of items
	// (GET /items)
	GetItems(c *fiber.Ctx) error
	// Create a new item
	// (POST /items)
	PostItems(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetItems operation middleware
func (siw *ServerInterfaceWrapper) GetItems(c *fiber.Ctx) error {

	return siw.Handler.GetItems(c)
}

// PostItems operation middleware
func (siw *ServerInterfaceWrapper) PostItems(c *fiber.Ctx) error {

	return siw.Handler.PostItems(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/items", wrapper.GetItems)

	router.Post(options.BaseURL+"/items", wrapper.PostItems)

}

type GetItemsRequestObject struct {
}

type GetItemsResponseObject interface {
	VisitGetItemsResponse(ctx *fiber.Ctx) error
}

type GetItems200JSONResponse []Item

func (response GetItems200JSONResponse) VisitGetItemsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetItems404JSONResponse Error

func (response GetItems404JSONResponse) VisitGetItemsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostItemsRequestObject struct {
	Body *PostItemsJSONRequestBody
}

type PostItemsResponseObject interface {
	VisitPostItemsResponse(ctx *fiber.Ctx) error
}

type PostItems201JSONResponse Item

func (response PostItems201JSONResponse) VisitPostItemsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type PostItems400JSONResponse Error

func (response PostItems400JSONResponse) VisitPostItemsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get a list of items
	// (GET /items)
	GetItems(ctx context.Context, request GetItemsRequestObject) (GetItemsResponseObject, error)
	// Create a new item
	// (POST /items)
	PostItems(ctx context.Context, request PostItemsRequestObject) (PostItemsResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetItems operation middleware
func (sh *strictHandler) GetItems(ctx *fiber.Ctx) error {
	var request GetItemsRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetItems(ctx.UserContext(), request.(GetItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetItems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetItemsResponseObject); ok {
		if err := validResponse.VisitGetItemsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostItems operation middleware
func (sh *strictHandler) PostItems(ctx *fiber.Ctx) error {
	var request PostItemsRequestObject

	var body PostItemsJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostItems(ctx.UserContext(), request.(PostItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostItems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostItemsResponseObject); ok {
		if err := validResponse.VisitPostItemsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RUQW/bPAz9KwK/7+jaSppDoVs3FEMuXbHttKIYVJtJVNiSKtHJgsD/faDUpG2cFRvQ",
	"3QiZ5Ht8fPQOatd5Z9FSBLWDWK+w0ym8CsEFDnxwHgMZTM8dxqiXyCH+1J1vERRcWoGcLlxd9yFgAwXQ",
	"1vOnSMHYJQzD4cXdP2BNMBQwJ+zGCHVATfiDTHeEMpXT2Zm8OJtOvk1mSkol5XcoYOFCpwkUNJrwLJWN",
	"0Aswzetmk1NJVh9jXuVIJKp/NNQ1bk7PNW5+jZvfNw742BuWUt3m0rsRGKcZu3DctcFYB+PJOMsLEdEk",
	"3pc3c/EEKIwVnz1afjovpci6lQxuKPH5eqiBAtYYYm42KWUpeTTn0WpvQMF5KctzKMBrWqXhKkPYpWiJ",
	"NObzBakPNgotWhNJuIVI+QzOEmlOmzeg4BPSPHViAaJ3NmbxplImbzhLaBOA9r41daqsHiKj7O3L0YHO",
	"/wEXoOC/6tno1ZPLq6T98w51CHqbVT1W8xVrLpnJ2V/xeYtGvrQTuNcuA4qF622TXBH7rtNhm5U6lpOJ",
	"eRdP6P8x3RTrb3GTksX9Vvjg1qYxdsnvusPxOm5cfLGPxx4jfXDN9t1G3x/LieH5XTRI2rR79HwOFHoc",
	"RvaYvBunNwnln1OTLSD/vQXmdq1b0whjfU9HDshLfbHT3CBi4NsFdbuDPrSgYEXkVVW1rtbtykVSF/JC",
	"wnA3/AoAAP//E8VM0P8FAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
